{"version":3,"sources":["components/tasks/Task.js","components/tasks/TaskList.js","components/Info.js","components/tasks/AddTask.js","components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Task","props","useState","id","title","description","date","tag","tagColor","task","draggableId","toString","index","style","display","provided","className","draggableProps","dragHandleProps","ref","innerRef","color","cursor","onClick","update","delete","TaskList","tasksURL","todos","setTodos","useEffect","getTaskDB","a","fetchTasks","tasks","removeTask","fetch","method","status","filter","todo","alert","updateTask","editableAtt","newTodo","newTask","edit","successfullPost","failedPost","headers","body","JSON","stringify","prompt","json","onDragEnd","result","destination","source","droppableId","obj","console","log","splice","droppableProps","map","placeholder","Math","random","Info","href","AddTask","setNewTask","addTask","added","data","inputChanged","event","target","value","nullNewTask","addAndSubmit","e","preventDefault","onSubmit","htmlFor","type","required","onChange","maxLength","ToDo","activeInterface","setActiveInterface","changeInterface","clickedIF","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6932329f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { AiOutlineClose, AiFillEdit } from \"react-icons/ai\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nfunction Task(props) {\n  const [task, setTask] = useState({\n    id: props.id,\n    title: props.title,\n    description: props.description,\n    date: props.date,\n    tag: props.tag,\n    tagColor: props.tagColor,\n  });\n\n  return (\n    <Draggable\n      draggableId={task.id.toString()}\n      index={props.index}\n      style={{ display: \"table\" }}\n    >\n      {(provided) => (\n        <tr\n          className={`task-container ${task.tagColor}`}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <td>{task.title}</td>\n          <td className=\"icon\">\n            <AiFillEdit\n              style={{ color: \"white\", cursor: \"pointer\" }}\n              onClick={() => props.update(props.id, \"title\")}\n            />\n          </td>\n          <td>{task.description}</td>\n          <td className=\"icon\">\n            <AiFillEdit\n              style={{ color: \"white\", cursor: \"pointer\" }}\n              onClick={() => props.update(props.id, \"description\")}\n            />\n          </td>\n          <td>{task.date}</td>\n          <td className=\"icon\">\n            <AiFillEdit\n              style={{ color: \"white\", cursor: \"pointer\" }}\n              onClick={() => props.update(props.id, \"date\")}\n            />\n          </td>\n          <td className=\"task-tags\">{task.tag}</td>\n          <td className=\"icon\">\n            <AiFillEdit\n              style={{ color: \"white\", cursor: \"pointer\" }}\n              onClick={() => props.update(props.id, \"tag\")}\n            />\n          </td>\n          <td className=\"icon\">\n            <AiOutlineClose\n              style={{ color: \"white\", cursor: \"pointer\" }}\n              onClick={() => props.delete(props.id)}\n            />\n          </td>\n        </tr>\n      )}\n    </Draggable>\n  );\n}\n\nexport default Task;\n","import React, { useEffect, useState } from \"react\";\nimport Task from \"./Task\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nfunction TaskList(props) {\n  const tasksURL = `/tasks/`;\n  const [todos, setTodos] = useState([]);\n\n  // Fetch tasks from server\n  useEffect(() => {\n    const getTaskDB = async () => {\n      let tasks = await fetchTasks();\n      setTodos(tasks);\n    };\n\n    getTaskDB();\n  }, []);\n\n  // Remove task\n  const removeTask = async (id) => {\n    let del = await fetch(tasksURL + id, {\n      method: \"DELETE\",\n    });\n    del.status === 200\n      ? setTodos(todos.filter((todo) => todo.id !== id))\n      : alert(\"Error with deleting task\");\n  };\n\n  // Update a task\n  const updateTask = async (id, editableAtt) => {\n    let newTodo = todos.filter((task) => task.id === id);\n    let newTask = newTodo[0];\n\n    const edit = async () => {\n      // Alert if editing successful\n      const successfullPost = () => {\n        alert(\"Task edited successfully!\");\n      };\n\n      // Alert if editing failed\n      const failedPost = () => {\n        alert(\"Couldn't edit task\");\n      };\n\n      let res = await fetch(tasksURL + id, {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(newTask),\n      });\n\n      res.status === 200 ? successfullPost() : failedPost();\n    };\n\n    switch (editableAtt) {\n      case \"title\":\n        newTask.title = prompt(\"Insert new title\");\n        edit();\n        break;\n      case \"description\":\n        newTask.description = prompt(\"Insert new description\");\n        edit();\n        break;\n      case \"date\":\n        newTask.date = prompt(\"Insert new date\");\n        edit();\n        break;\n      case \"tag\":\n        newTask.tag = prompt(\"Insert new tag\");\n        edit();\n        break;\n      default:\n        alert(\"No editable attributes\");\n    }\n  };\n\n  // Fetch Tasks\n  const fetchTasks = async () => {\n    let tasks = await fetch(tasksURL);\n    return tasks.json();\n  };\n\n  const dragEnd = (result) => {\n    const { destination, source } = result;\n\n    // Error catching\n    if (!destination) {\n      return;\n    }\n\n    // Error catching\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    let obj = todos[source.index];\n    console.log(obj);\n    todos.splice(source.index, 1);\n    todos.splice(destination.index, 0, obj);\n  };\n\n  // LISTS ALL TASKS\n  return (\n    <div className=\"task-list-div\" key={Math.random()}>\n      <h1>Tasks</h1>\n      <DragDropContext onDragEnd={dragEnd}>\n        <table className=\"task-list-container\">\n          <Droppable droppableId=\"table\">\n            {(provided) => (\n              <tbody ref={provided.innerRef} {...provided.droppableProps}>\n                {todos.map((task, index) => (\n                  <Task\n                    index={index}\n                    key={task.id}\n                    id={task.id}\n                    title={task.title}\n                    description={task.description}\n                    date={task.date}\n                    tag={task.tag}\n                    tagColor={task.tagColor}\n                    delete={removeTask}\n                    update={updateTask}\n                  />\n                ))}\n                {provided.placeholder}\n              </tbody>\n            )}\n          </Droppable>\n        </table>\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default TaskList;\n","function Info() {\n  return (\n    <div className=\"info-div\">\n      <h1>How to use</h1>\n      <p>\n        Add new tasks from 'Add new task+' -tab.\n        <br />\n        All tasks listed in Home-tab.\n        <br /> Delete tasks py pressing X-icon.\n        <br /> Update a task py pressing pen-icon and RELOAD/MOVE to another tap\n        after to see the changes.\n        <br /> Momentarily rearrange tasks by dragging.\n      </p>\n      <h2>Creator</h2>\n      <p>Creator of this App is Jenna Westerlund</p>\n      <h2>Licences</h2>\n      <p>Uses Ant Design Icons from react-icons </p>\n      <a href=\"https://react-icons.github.io/react-icons/icons?name=ai\">\n        Link to Ant Design Icons from react-icons\n      </a>\n      <p>Under Open source MIT-license </p>\n      <a href=\"https://opensource.org/licenses/MIT\">\n        Link to Open source MIT-license\n      </a>\n    </div>\n  );\n}\n\n/* Copyright 2022\n\nPermission is hereby granted, free of charge,\nto any person obtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or\nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */\n\nexport default Info;\n","import { useEffect, useState } from \"react\";\n\nfunction AddTask(props) {\n  const tasksURL = \"/tasks/\";\n  const [todos, setTodos] = useState([]);\n  const [newTask, setNewTask] = useState({\n    title: \"\",\n    description: \"\",\n    date: \"\",\n    tag: \"\",\n    tagColor: \"\",\n  });\n\n  // Fetch tasks from server\n  useEffect(() => {\n    const getTaskDB = async () => {\n      let tasks = await fetchTasks();\n      setTodos(tasks);\n    };\n\n    getTaskDB();\n  }, []);\n\n  // Fetch Tasks\n  const fetchTasks = async () => {\n    let tasks = await fetch(tasksURL);\n    return tasks.json();\n  };\n\n  // Add Task\n  const addTask = async (task) => {\n    let added = await fetch(tasksURL, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(task),\n    });\n\n    let data = await added.json();\n\n    setTodos([...todos, data]);\n\n    added.status === 201 ? successfullPost() : failedPost();\n  };\n\n  const inputChanged = (event) => {\n    setNewTask({ ...newTask, [event.target.id]: event.target.value });\n  };\n\n  // Null newTask\n  const nullNewTask = () => {\n    setNewTask({\n      title: \"\",\n      description: \"\",\n      date: \"\",\n      tag: \"\",\n      tagColor: \"\",\n    });\n  };\n\n  // Alert if successfull post\n  const successfullPost = () => {\n    nullNewTask();\n    alert(\"Task added successfully!\");\n  };\n\n  // Alert if posting failed\n  const failedPost = () => {\n    nullNewTask();\n    alert(\"Couldn't add task\");\n  };\n\n  // Submit\n  const addAndSubmit = async (e) => {\n    e.preventDefault();\n\n    addTask(newTask);\n  };\n\n  // Return Add task -form\n  return (\n    <div className=\"add-task-div\">\n      <form onSubmit={addAndSubmit} className=\"add-form\">\n        <label htmlFor=\"title\">Title of the task</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          value={newTask.title}\n          required\n          onChange={inputChanged}\n          maxLength=\"50\"\n        ></input>\n\n        <label htmlFor=\"description\">Description of task</label>\n        <input\n          type=\"textfield\"\n          id=\"description\"\n          value={newTask.description}\n          onChange={inputChanged}\n          maxLength=\"150\"\n        ></input>\n\n        <label htmlFor=\"date\">Date for the task</label>\n        <input\n          type=\"date\"\n          id=\"date\"\n          value={newTask.date}\n          onChange={inputChanged}\n        ></input>\n\n        <label htmlFor=\"tag\">Tag for task</label>\n        <input\n          type=\"text\"\n          id=\"tag\"\n          value={newTask.tag}\n          onChange={inputChanged}\n          maxLength=\"30\"\n        ></input>\n\n        <label htmlFor=\"tagColor\">Color for this task</label>\n        <select id=\"tagColor\" value={newTask.tagColor} onChange={inputChanged}>\n          <option value=\"none\">None</option>\n          <option value=\"purple\">Purple</option>\n          <option value=\"cyan\">Cyan</option>\n          <option value=\"orange\">Orange</option>\n          <option value=\"golden\">Golden</option>\n        </select>\n\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n}\n\nexport default AddTask;\n","import React, { useState } from \"react\";\nimport TaskList from \"./tasks/TaskList\";\nimport Info from \"./Info\";\nimport AddTask from \"./tasks/AddTask\";\nimport \"./Todo.css\";\n\nfunction ToDo() {\n  const [activeInterface, setActiveInterface] = useState();\n\n  // Change interface when menu-bar's buttons are clicked\n  const changeInterface = (clickedIF) => setActiveInterface(clickedIF);\n\n  return (\n    <div>\n      <div className=\"menu-bar\">\n        <button onClick={() => changeInterface(<TaskList />)}>Home</button>\n        <button onClick={() => changeInterface(<AddTask />)}>Add new +</button>\n        <button onClick={() => changeInterface(<Info />)}>Info</button>\n      </div>\n      {activeInterface}\n    </div>\n  );\n}\n\nexport default ToDo;\n","import Todo from \"./components/Todo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}